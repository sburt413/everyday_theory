<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Design on Everyday Theory</title>
    <link>http://localhost:1313/tags/design/</link>
    <description>Recent content in Design on Everyday Theory</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 May 2024 12:00:00 -0400</lastBuildDate><atom:link href="http://localhost:1313/tags/design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Software Engineering as Bets</title>
      <link>http://localhost:1313/post/003-software-engineering-as-bets/</link>
      <pubDate>Thu, 09 May 2024 12:00:00 -0400</pubDate>
      
      <guid>http://localhost:1313/post/003-software-engineering-as-bets/</guid>
      <description>
        
          
            Chess has a long history of structured openings. You have a set of steps that put you in a certain position, with known strengths and weaknesses. You basically start the actual game several moves in. From the opening, you have several options to branch out from.
There is also a common nomenclature. If I say, &amp;ldquo;Queen&amp;rsquo;s Gambit&amp;rdquo;&amp;hellip; honestly most people will think of the Netflix series. In reality, the term does refer to an actual opening that a chess expert should be able to visualize from just the name alone.
          
          
        
      </description>
    </item>
    
    <item>
      <title>Separate What From How</title>
      <link>http://localhost:1313/post/002-what-from-how/</link>
      <pubDate>Mon, 06 May 2024 12:00:00 -0400</pubDate>
      
      <guid>http://localhost:1313/post/002-what-from-how/</guid>
      <description>
        
          
            The primary point of good Software Design is to separate out what your code does from how your code does it. Being able to make this distinction in real time when coding is critical. Let’s explore.
Core versus Shell Look hard enough in the right places and you&amp;rsquo;ll find the saying: ”Functional Core; Imperative Shell”. It’s an interesting and useful mantra. You could also equally say “Object Oriented Core; Imperative Shell”.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
