<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on Everyday Theory</title>
    <link>http://localhost:1313/categories/architecture/</link>
    <description>Recent content in Architecture on Everyday Theory</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Apr 2024 12:00:00 -0400</lastBuildDate><atom:link href="http://localhost:1313/categories/architecture/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What From How</title>
      <link>http://localhost:1313/post/002-what-from-how/</link>
      <pubDate>Mon, 29 Apr 2024 12:00:00 -0400</pubDate>
      
      <guid>http://localhost:1313/post/002-what-from-how/</guid>
      <description>
        
          
            Find the right people and you can have an hours long conversation over functional programming and object oriented programming. Ultimately, I don’t think either side would fully get to the point. The primary point is to separate out what your code does from how your code does it. Once you have a deep understanding of that, everything starts to look like imperative programming. Let’s dig deeper into this.
Functional Core; Imperative Shell ”Functional Core; Imperative Shell”.
          
          
        
      </description>
    </item>
    
  </channel>
</rss>
